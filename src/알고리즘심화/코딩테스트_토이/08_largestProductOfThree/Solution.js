const largestProductOfThree = function (arr) {
  // 분석
  // 음수값과 양수값이 섞인 배열이 나왔을 때를 구분해줘야한다.
  // 이에 대한 수학적 사고만 가능하면 쉽게 풀 수 있는 문제이다.
  
  // 풀이
  // 1. 우선 음수 양수에 상관없이 내림차순으로 정렬한다.
  arr.sort((a, b) => b - a)

  // 2. 변수를 선언하고 배열의 앞에서부터 순차적으로 3개의 값을 곱한 값을 대입한다.
  // 일반적으로 모두 양수이거나 음수가 2개만 있다면 이게 최대값이다
  // 배열이 모두 음수인 경우에도 아래가 최대값이다.
  let maxVal1 = arr[0] * arr[1] * arr[2]

  // 3. 허나 배열 전체가 음수가 아님에도 만약 1개나 3개의 음수가 포함되어 있다면 위의 값은 최대값이 될 수 없다
  // 그럴 때는 첫번째인덱스(가장높은값)에 마지막 두개의 인덱스를 곱하면 최대값을 구할 수 있다.
  let maxVal2 = arr[0] * arr[arr.length - 1] * arr[arr.length - 2]
  
  // 4. 둘 중 최대값을 반환한다.
  return Math.max(maxVal1, maxVal2)

  // + 상세설명 첨언
  // 내림차순 정렬을 했기 때문에, 어디 부터 음수가 시작될지는 모르지만,
  // 음수가 일찍 시작됐더라도 마지막 인덱스 두개의 값은 절대값이 가장 큰 음수들이 될 수밖에 없고
  // 그것을 첫번째 인덱스 값(음수가 아닌)과 곱하면 최대값을 뽑아낼 수 있다.
  // 어차피 첫번째 인덱스부터 음수라면 위에서 봤듯 처음 세개의 곱이 최대값이되기 때문에 걱정할 필요가 없다.
};